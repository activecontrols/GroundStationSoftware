/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE CONTROLLER_STATUS PACKING
package com.MAVLink.pscom;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Controller system state.
 */
public class msg_controller_status extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_CONTROLLER_STATUS = 51801;
    public static final int MAVLINK_MSG_LENGTH = 8;
    private static final long serialVersionUID = MAVLINK_MSG_ID_CONTROLLER_STATUS;

    
    /**
     * Current trajectory segment being followed.
     */
    @Description("Current trajectory segment being followed.")
    @Units("")
    public int current_segment;
    
    /**
     * Current point of trajectory segment being followed.
     */
    @Description("Current point of trajectory segment being followed.")
    @Units("")
    public int current_point;
    
    /**
     * Total segments stored.
     */
    @Description("Total segments stored.")
    @Units("")
    public int total_segments;
    
    /**
     * Total trajectory points being followed.
     */
    @Description("Total trajectory points being followed.")
    @Units("")
    public int total_points;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_CONTROLLER_STATUS;

        packet.payload.putUnsignedShort(current_segment);
        packet.payload.putUnsignedShort(current_point);
        packet.payload.putUnsignedShort(total_segments);
        packet.payload.putUnsignedShort(total_points);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a controller_status message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.current_segment = payload.getUnsignedShort();
        this.current_point = payload.getUnsignedShort();
        this.total_segments = payload.getUnsignedShort();
        this.total_points = payload.getUnsignedShort();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_controller_status() {
        this.msgid = MAVLINK_MSG_ID_CONTROLLER_STATUS;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_controller_status( int current_segment, int current_point, int total_segments, int total_points) {
        this.msgid = MAVLINK_MSG_ID_CONTROLLER_STATUS;

        this.current_segment = current_segment;
        this.current_point = current_point;
        this.total_segments = total_segments;
        this.total_points = total_points;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_controller_status( int current_segment, int current_point, int total_segments, int total_points, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_CONTROLLER_STATUS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.current_segment = current_segment;
        this.current_point = current_point;
        this.total_segments = total_segments;
        this.total_points = total_points;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_controller_status(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_CONTROLLER_STATUS;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

            
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_CONTROLLER_STATUS - sysid:"+sysid+" compid:"+compid+" current_segment:"+current_segment+" current_point:"+current_point+" total_segments:"+total_segments+" total_points:"+total_points+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_CONTROLLER_STATUS";
    }
}
        